---
<% if File.executable?(%x(which vagrant).chomp) %>
driver:
  name: vagrant
  box_check_update: true
  ssh:
    insert_key: false
  synced_folders:
    - [ "<%= ENV['DATA'] %>", "/data" ]
    - [ ".", "/tmp/home" ]
<% end %>

transport:
  forward_agent: true
  username: ubuntu

provisioner:
  name: shell
  require_chef_omnibus: false
  script: base/bootstrap.sh

verifier:
  name: inspec
  inspec_tests:
    - test/smoke/default

platforms:
  - name: ubuntu
    driver:
      linked_clone: true
      dockerfile: ubuntu/Dockerfile
      box: bento/ubuntu-16.04
  - name: debian
    driver:
      linked_clone: true
      dockerfile: debian/Dockerfile
      box: bento/debian-9.3
  - name: centos
    driver:
      linked_clone: true
      dockerfile: centos/Dockerfile
  - name: amazon
    driver_config:
      linked_clone: true
      dockerfile: amazon/Dockerfile
  - name: lambda
    driver_config:
      linked_clone: true
      dockerfile: lambda/Dockerfile
    provisioner:
      script: lambda/bootstrap.sh
  - name: alpine
    driver_config:
      linked_clone: true
      dockerfile: alpine/Dockerfile
    provisioner:
      script: alpine/bootstrap.sh
  - name: ubuntu-minima
    driver:
      linked_clone: true
      dockerfile: ubuntu/Dockerfile
      platform: ubuntu
    provisioner:
      script: ubuntu/minima.sh
  - name: debian-minima
    driver:
      linked_clone: true
      dockerfile: debian/Dockerfile
      platform: debian
    provisioner:
      script: debian/minima.sh
  - name: centos-minima
    driver:
      linked_clone: true
      dockerfile: centos/Dockerfile
      platform: centos
    provisioner:
      script: centos/minima.sh
  - name: alpine-minima
    driver:
      linked_clone: true
      dockerfile: alpine/Dockerfile
      platform: alpine
    provisioner:
      script: alpine/minima.sh
  - name: lambda-minima
    driver:
      linked_clone: true
      dockerfile: lambda/Dockerfile
      platform: lambda
    provisioner:
      script: lambda/minima.sh
  - name: lambda-go1x
    driver:
      linked_clone: true
      dockerfile: lambda/Dockerfile.go1x
      platform: lambda
    provisioner:
      script: lambda/minima.sh
  - name: lambda-go1x
    driver:
      linked_clone: true
      dockerfile: lambda/Dockerfile.go1x
      platform: lambda
    provisioner:
      script: lambda/minima.sh
  - name: lambda-py36
    driver:
      linked_clone: true
      dockerfile: lambda/Dockerfile.py36
      platform: lambda
    provisioner:
      script: lambda/minima.sh
  - name: lambda-py27
    driver:
      linked_clone: true
      dockerfile: lambda/Dockerfile.py27
      platform: lambda
    provisioner:
      script: lambda/minima.sh
  - name: lambda-java8
    driver:
      linked_clone: true
      dockerfile: lambda/Dockerfile.java8
      platform: lambda
    provisioner:
      script: lambda/minima.sh

suites:
  - name: virtualbox
    driver:
      provider: virtualbox
  - name: aws
    driver:
      name: ec2
      interface: private_dns
      image_id: <%= ENV['FOGG_IMAGE_ID'] %>
      spot_price: <%= ENV['FOGG_SPOT_PRICE'] || '0.01' %>
      instance_type: <%= ENV['FOGG_INSTANCE_TYPE'] || 't2.nano' %>
      associate_public_ip: false
      aws_ssh_key_id: <%= ENV['FOGG_SVC_SSH_KEY'] %>
      security_group_ids: 
        - <%= ENV['FOGG_ENV_SG'] %>
        - <%= ENV['FOGG_APP_SG'] %>
        - <%= ENV['FOGG_SVC_SG'] %>
      subnet_id: <%= (ENV['FOGG_SVC_SUBNETS']||"").split(/\s+/)[0] %>
      iam_profile_name: <%= ENV['FOGG_SVC_IAM_PROFILE'] %>
      user_data: "#!/bin/bash\nmkdir -p /data/cache/apt\napt-get update\napt-get install -y nfs-common\nmount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 efs.<%= ENV['FOGG_ENV'] %>.immanent.io:/ /data\n"
      block_device_mappings:
        - device_name: /dev/sda1
          ebs:
            volume_size: 20
            delete_on_termination: true
  - name: docker
    driver:
      name: docker
      username: ubuntu
      build_context: true
      require_chef_omnibus: false
      use_sudo: false
      use_cache: <%= ENV['FOGG_USE_CACHE'] || "true" %>
      run_command: "bash -c 'mkdir -p /var/run/sshd && exec /usr/sbin/sshd -D -o UseDNS=no -o UsePAM=yes -o PasswordAuthentication=no -o UsePrivilegeSeparation=sandbox'"
      volume:
        - <%= ENV['DATA'] %>:/data
        - /var/run/docker.sock:/var/run/docker.sock
      <%= ENV['FOGG_IMAGE_ID'] ? "image: #{ENV['FOGG_IMAGE_ID']}" : ""  %>
      <%= ENV['SSH_HOST'] ? "socket: tcp://#{ENV['SSH_HOST']}" : ""  %>
